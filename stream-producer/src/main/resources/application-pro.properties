# \u57FA\u7840\u914D\u7F6E

# \u5E94\u7528\u7A0B\u5E8F\u90E8\u7F72\u7684\u5B9E\u4F8B\u6570\u91CF,\u5F53\u4F7F\u7528kafka\u7684\u65F6\u5019\u9700\u8981\u8BBE\u7F6E\u5206\u533A
# \u9ED8\u8BA4\u4E3A1
spring.cloud.stream.instance-count=1
# \u5E94\u7528\u7A0B\u5E8F\u5B9E\u4F8B\u7D22\u5F15,\u4ECE0\u5F00\u59CB,\u4F7F\u7528\u5206\u533A\u548Ckafka\u7684\u65F6\u5019\u4F7F\u7528
spring.cloud.stream.instance-index=
# \u52A8\u6001\u7ED1\u5B9A\u76EE\u6807\u5217\u8868,\u5217\u8868\u9ED8\u8BA4\u4E3A\u7A7A,\u8BBE\u7F6E\u4E86\u5177\u4F53\u5217\u8868\u540E,\u5217\u8868\u4E2D\u7684\u76EE\u6807\u624D\u80FD\u88AB\u53D1\u73B0
spring.cloud.stream.dynamic-destinations=
# \u9ED8\u8BA4\u7ED1\u5B9A\u5668\u914D\u7F6E,\u6709\u591A\u4E2A\u7ED1\u5B9A\u5668\u65F6\u4F7F\u7528
spring.cloud.stream.default-binder=
# \u6FC0\u6D3Bcloud\u914D\u7F6E,\u63D0\u4F9B\u4E86spring cloud connectors\u7684\u5E94\u7528
# \u9ED8\u8BA4\u4E3Afalse
# false,\u7ED1\u5B9A\u5668\u4F1A\u81EA\u52A8\u68C0\u6D4B\u5408\u9002\u670D\u52A1\u5668\u7ED1\u5B9A
# true,\u7ED1\u5B9A\u5668\u5FFD\u7565\u7ED1\u5B9A\u670D\u52A1,\u4F9D\u8D56\u7A0B\u5E8F\u4E2D\u8BBE\u7F6E\u5C5E\u6027\u6765\u7ED1\u5B9A\u548C\u8FDE\u63A5
spring.cloud.stream.overrideCloudConnectors=false


# \u7ED1\u5B9A\u901A\u9053\u914D\u7F6E

# \u901A\u7528\u914D\u7F6E

# \u8BE5\u53C2\u6570\u7528\u6765\u914D\u7F6E\u6D88\u606F\u901A\u9053\u7ED1\u5B9A\u5728\u6D88\u606F\u4E2D\u95F4\u4EF6\u7684\u76EE\u6807\u540D\u79F0
# RabbitMQ\u7684Exchange \u6216 Kafka\u7684Topic
# \u5982\u679C\u7ED1\u5B9A\u901A\u9053\u662F\u4E00\u4E2A\u6D88\u8D39\u8005(\u8F93\u5165),\u53EF\u4EE5\u7ED1\u5B9A\u591A\u4E2A,\u9017\u53F7\u5206\u9694.
spring.cloud.stream.bindings.<channelName>.destination=
# \u8BE5\u53C2\u6570\u7528\u6765\u8BBE\u7F6E\u7ED1\u5B9A\u901A\u9053\u7684\u6D88\u8D39\u7EC4,\u4E3B\u8F93\u5165\u901A\u9053,\u4FDD\u8BC1\u540C\u4E00\u4E2A\u6D88\u8D39\u7EC4\u4E2D\u7684\u6D88\u606F\u53EA\u4F1A\u6709\u4E00\u4E2A\u6D88\u8D39\u5B9E\u4F8B\u63A5\u6536\u548C\u5904\u7406
spring.cloud.stream.bindings.<channelName>.group=null
# \u8BE5\u53C2\u6570\u7528\u6765\u8BBE\u7F6E\u7ED1\u5B9A\u901A\u9053\u7684\u6D88\u606F\u7C7B\u578B
spring.cloud.stream.bindings.<channelName>.contentType=null
# \u5F53\u5B58\u5728\u591A\u4E2A\u7ED1\u5B9A\u5668\u65F6\u4F7F\u7528\u53C2\u6570\u6765\u6307\u5B9A\u5F53\u524D\u901A\u9053\u4F7F\u7528\u90A3\u4E2A\u5177\u4F53\u7684\u7ED1\u5B9A\u5668
spring.cloud.stream.bindings.<channelName>.binder=null

# \u6D88\u8D39\u8005\u914D\u7F6E

# \u8F93\u5165\u901A\u9053\u6D88\u8D39\u8005\u7684\u5E76\u53D1\u6570
spring.cloud.stream.bindings.<channelName>.consumer.concurrency=1
# \u6D88\u606F\u751F\u4EA7\u8005\u662F\u5426\u5206\u533A
spring.cloud.stream.bindings.<channelName>.consumer.partitioned=false
# \u8BBE\u7F6E\u4E3Araw\u65F6\u7981\u7528\u5BF9\u6D88\u606F\u5934\u89E3\u6790
# spring cloud stream\u9ED8\u8BA4\u89E3\u6790\u5D4C\u5165\u7684\u5934\u90E8\u4FE1\u606F
spring.cloud.stream.bindings.<channelName>.consumer.headerMode=embeddedheaders
# \u8F93\u5165\u901A\u9053\u6D88\u606F\u5904\u7406\u7684\u6700\u5927\u91CD\u8BD5\u6B21\u6570
spring.cloud.stream.bindings.<channelName>.consumer.maxAttempts=3
# \u91CD\u8BD5\u6D88\u606F\u5904\u7406\u7684\u521D\u59CB\u95F4\u9694\u65F6\u95F4
spring.cloud.stream.bindings.<channelName>.consumer.backOffInitialInterval=1000
# \u91CD\u8BD5\u6D88\u606F\u5904\u7406\u7684\u6700\u5927\u95F4\u9694\u65F6\u95F4
spring.cloud.stream.bindings.<channelName>.consumer.backOffMaxInterval=10000
# \u91CD\u8BD5\u6D88\u606F\u5904\u7406\u65F6\u95F4\u95F4\u9694\u7684\u9012\u589E\u4E58\u6570
spring.cloud.stream.bindings.<channelName>.consumer.backOffMultiplier=2.0

# \u751F\u4EA7\u8005\u914D\u7F6E

# \u914D\u7F6E\u8F93\u51FA\u901A\u9053\u6570\u636E\u5206\u533A\u952E\u7684SpEL\u8868\u8FBE\u5F0F,\u5BF9\u5F53\u524D\u7ED1\u5B9A\u901A\u9053\u8F93\u51FA\u6570\u636E\u8FDB\u884C\u5206\u533A\u5904\u7406
# partitionCount\u53C2\u6570\u5FC5\u987B\u5927\u4E8E1,\u4E0EpartitionKeyExtractorClass\u53C2\u6570\u4E92\u65A5
spring.cloud.stream.bindings.<channelName>.producer.partitionKeyExpression=null
# \u914D\u7F6E\u5206\u533A\u952E\u63D0\u53D6\u7B56\u7565\u63A5\u53E3PartitionKeyExtractorStrategy\u7684\u5B9E\u73B0
# \u5BF9\u5F53\u524D\u7ED1\u5B9A\u901A\u9053\u7684\u8F93\u51FA\u6570\u636E\u8FDB\u884C\u5206\u533A\u5904\u7406
# partitionCount\u53C2\u6570\u5FC5\u987B\u5927\u4E8E1,\u4E0EpartitionKeyExpression\u53C2\u6570\u4E92\u65A5
spring.cloud.stream.bindings.<channelName>.producer.partitionKeyExtractorClass=null
# \u5728\u914D\u7F6E\u5206\u533A\u9009\u62E9\u5668\u63A5\u53E3PartitionSelectorStrategy\u7684\u5B9E\u73B0
# \u4E0EpartitionSelectorExpression\u53C2\u6570\u4E92\u65A5
# \u5982\u679C\u4E0D\u8BBE\u7F6E,\u5219\u8BA1\u7B97\u89C4\u5219\u4E3AhashCode(key)%patririonCount,key\u6839\u636EpartitionKeyExpression\u6216partitionKeyExtractorClass\u7684\u914D\u7F6E\u8BA1\u7B97\u5F97\u5230
spring.cloud.stream.bindings.<channelName>.producer.partitionSelectorClass=null
# \u5728\u914D\u7F6E\u5206\u533A\u9009\u62E9\u5668SpEL\u8868\u8FBE\u5F0F
# \u4E0EpartitionSelectorClass\u53C2\u6570\u4E92\u65A5
# \u5982\u679C\u4E0D\u8BBE\u7F6E,\u5219\u8BA1\u7B97\u89C4\u5219\u4E3AhashCode(key)%patririonCount,key\u6839\u636EpartitionKeyExpression\u6216partitionKeyExtractorClass\u7684\u914D\u7F6E\u8BA1\u7B97\u5F97\u5230
spring.cloud.stream.bindings.<channelName>.producer.partitionSelectorExpression=null
# \u5206\u533A\u529F\u80FD\u5F00\u542F\u65F6,\u914D\u7F6E\u6D88\u606F\u6570\u636E\u7684\u5206\u533A\u6570;\u5982\u679C\u914D\u7F6E\u4E86\u5206\u533A\u952E\u7684\u751F\u6210\u7B56\u7565,\u5219\u5FC5\u987B\u5927\u4E8E1
spring.cloud.stream.bindings.<channelName>.producer.partitionCount=1
# \u8BBE\u7F6E\u4E3Araw\u7684\u65F6\u5019\u8F93\u51FA\u65F6\u7981\u6B62\u5D4C\u5165\u5F0F\u5934\u90E8\u4FE1\u606F
# \u4E0D\u652F\u6301\u6D88\u606F\u5934\u529F\u80FD\u7684\u4E2D\u95F4\u4EF6\u624D\u53EF\u4F7F\u7528
spring.cloud.stream.bindings.<channelName>.producer.headerMode=embeddedheaders

# \u7ED1\u5B9A\u5668\u914D\u7F6E

# RabbitMQ\u901A\u7528\u914D\u7F6E

# \u7528\u6765\u914D\u7F6ERabbitMQ\u7BA1\u7406\u63D2\u4EF6\u7684URL,\u914D\u7F6E\u591A\u4E2A\u9017\u53F7\u5206\u9694.
# \u914D\u7F6E\u5185\u5BB9\u5FC5\u987B\u5728spring.rabbitmq.addresses\u4E2D\u5B58\u5728
spring.cloud.stream.rabbit.binder.adminAddresses=
# \u7528\u6765\u914D\u7F6ERabbitMQ\u7684\u8282\u70B9\u540D\u79F0,\u914D\u7F6E\u591A\u4E2A\u9017\u53F7\u5206\u9694.\u914D\u7F6E\u591A\u4E2A\u8BF7\u6B3E\u4E0B,\u5B9A\u4F4D\u961F\u5217\u6240\u5728\u7684\u670D\u52A1\u5668\u5730\u5740
# \u914D\u7F6E\u5185\u5BB9\u5FC5\u987B\u5728spring.rabbitmq.addresses\u4E2D\u5B58\u5728
spring.cloud.stream.rabbit.binder.nodes=
# \u7ED1\u5B9A\u901A\u9053\u7684\u538B\u7F29\u7EA7\u522B,\u9009\u503C\u53CA\u542B\u4E49java.util.zip.Deflater\u4E2D\u7684\u5B9A\u4E49
spring.cloud.stream.rabbit.binder.compressionLevel=1

# RabbitMQ\u6D88\u8D39\u8005\u914D\u7F6E

# \u8BBE\u7F6E\u6D88\u606F\u7684\u786E\u8BA4\u6A21\u5F0F:NONE,MANUAL,AUTO
spring.cloud.stream.rabbit.bindings.<channelName>.consumer.acknowledgeMode=AUTO
# \u7528\u6765\u8BBE\u7F6E\u662F\u5426\u81EA\u52A8\u58F0\u660EDLQ(Dead-Letter-Queue),\u5E76\u7ED1\u5B9A\u5230DLX(Dead-Letter-Exchage)
spring.cloud.stream.rabbit.bindings.<channelName>.consumer.autoBindDlq=false
# \u7528\u6765\u8BBE\u7F6E\u8BA2\u9605\u662F\u5426\u88AB\u6301\u4E45\u5316,\u8BE5\u53C2\u6570\u4EC5\u5728group\u88AB\u8BBE\u7F6E\u7684\u65F6\u5019\u6709\u6548
spring.cloud.stream.rabbit.bindings.<channelName>.consumer.durableSubscription=true
# \u7528\u6765\u8BBE\u7F6E\u6D88\u8D39\u8005\u7684\u6700\u5927\u5E76\u53D1\u6570
spring.cloud.stream.rabbit.bindings.<channelName>.consumer.maxConcurrency=1
# \u7528\u6765\u8BBE\u7F6E\u9884\u53D6\u6570\u91CF,\u5B83\u6807\u8BC6\u5728\u4E00\u6B21\u7ED8\u753B\u4E2D\u4ECE\u6D88\u606F\u4E2D\u95F4\u4EF6\u4E2D\u83B7\u53D6\u7684\u6D88\u606F\u6570\u91CF,\u8BE5\u503C\u8D8A\u5927\u6D88\u606F\u5904\u7406\u8D8A\u5FEB,\u4F46\u662F\u4F1A\u5BFC\u81F4\u975E\u987A\u5E8F\u5904\u7406\u7684\u98CE\u9669
spring.cloud.stream.rabbit.bindings.<channelName>.consumer.prefetch=1
# \u7528\u6765\u8BBE\u7F6E\u7EDF\u4E00\u7684\u76EE\u6807\u548C\u961F\u5217\u540D\u79F0\u524D\u7F00
spring.cloud.stream.rabbit.bindings.<channelName>.consumer.prefix=
# \u7528\u6765\u8BBE\u7F6E\u56DE\u590D\u8FDE\u63A5\u7684\u5C1D\u8BD5\u65F6\u95F4\u95F4\u9694,\u4EE5\u6BEB\u79D2\u4E3A\u5355\u4F4D
spring.cloud.stream.rabbit.bindings.<channelName>.consumer.recoveryInterval=5000
# \u7528\u6765\u8BBE\u7F6E\u6D88\u606F\u4F20\u9012\u5931\u8D25\u65F6\u91CD\u4F20
spring.cloud.stream.rabbit.bindings.<channelName>.consumer.requeueRejected=true
# \u7528\u6765\u8BBE\u7F6E\u9700\u8981\u88AB\u4F20\u9012\u7684\u8BF7\u6C42\u5934\u4FE1\u606F
spring.cloud.stream.rabbit.bindings.<channelName>.consumer.requestHeaderPatterns=[STANDARD_REQUEST_HEADERS,'*'].
# \u7528\u6765\u8BBE\u7F6E\u9700\u8981\u88AB\u4F20\u9012\u7684\u54CD\u5E94\u5934\u4FE1\u606F
spring.cloud.stream.rabbit.bindings.<channelName>.consumer.replyHeaderPatterns=[STANDARD_REQUEST_HEADERS,'*'].
# \u9ED8\u8BA4\u60C5\u51B5\u4E0B,\u6D88\u606F\u5728\u91CD\u8BD5\u4E5F\u5931\u8D25\u4E4B\u540E\u4F1A\u88AB\u62D2\u7EDD.
# \u5982\u679CDLQ\u88AB\u914D\u7F6E\u7684\u65F6\u5019,RabbitMQ\u4F1A\u5C06\u5931\u8D25\u7684\u6D88\u606F\u8DEF\u7531\u5230DLQ\u4E2D
# \u5982\u679C\u53C2\u6570\u8BBE\u7F6E\u4E3Atrue,\u603B\u7EBF\u5931\u8D25\u7684\u4FE1\u606F\u9644\u52A0\u4E00\u4E9B\u5934\u4FE1\u606F(\u5305\u62EC\u5F02\u5E38\u4FE1\u606F,\u5F15\u8D77\u5931\u8D25\u7684\u8DDF\u8E2A\u5806\u6808)\u91CD\u65B0\u53D1\u5E03\u5230DLQ\u4E2D
spring.cloud.stream.rabbit.bindings.<channelName>.consumer.republishToDlq=
# \u7528\u6765\u8BBE\u7F6E\u662F\u5426\u542F\u7528channeltransacted,\u5373\u662F\u5426\u5728\u6D88\u606F\u4E2D\u4F7F\u7528\u4E8B\u52A1
spring.cloud.stream.rabbit.bindings.<channelName>.consumer.transacted=false
# \u7528\u6765\u8BBE\u7F6Etransaction-size\u7684\u6570\u91CF,\u5F53acknowledgeMode\u88AB\u8BBE\u7F6E\u4E3AAUTO\u65F6,\u5BB9\u5668\u4F1A\u5728\u5904\u7406txSize\u6570\u76EE\u6D88\u606F\u4E4B\u540E\u624D\u5F00\u59CB\u5E94\u7B54
spring.cloud.stream.rabbit.bindings.<channelName>.consumer.txSize=1


# RabbitMQ\u751F\u4EA7\u8005\u914D\u7F6E

# \u7528\u6765\u8BBE\u7F6E\u662F\u5426\u81EA\u52A8\u58F0\u660EDLQ(Dead-letter-Queue),\u5E76\u7ED1\u5B9A\u5230DLX(Dead-Letter-Exchange)\u4E0A
spring.cloud.stream.rabbit.bindings.<channelName>.producer.autoBindDlq=false
# \u662F\u5426\u542F\u52A8\u6D88\u606F\u6279\u5904\u7406
spring.cloud.stream.rabbit.bindings.<channelName>.producer.batchingEnabled=false
# \u5F53\u6279\u5904\u7406\u5F00\u542F\u65F6,\u7528\u6765\u8BBE\u7F6E\u7F13\u5B58\u7684\u6279\u5904\u7406\u6D88\u606F\u6570\u91CF
spring.cloud.stream.rabbit.bindings.<channelName>.producer.batchSize=100
# \u6279\u5904\u7406\u7F13\u5B58\u9650\u5236
spring.cloud.stream.rabbit.bindings.<channelName>.producer.batchBufferLimit=10000
# \u6279\u5904\u7406\u8D85\u65F6\u65F6\u95F4
spring.cloud.stream.rabbit.bindings.<channelName>.producer.batchTimeout=5000
# \u6D88\u606F\u53D1\u9001\u65F6\u662F\u5426\u542F\u7528\u538B\u7F29
spring.cloud.stream.rabbit.bindings.<channelName>.producer.compress=false
# \u6D88\u606F\u53D1\u9001\u6A21\u5F0F
spring.cloud.stream.rabbit.bindings.<channelName>.producer.deliveryMode=PERSISTENT
# \u8BBE\u7F6E\u7EDF\u4E00\u7684\u76EE\u6807\u524D\u7F00
spring.cloud.stream.rabbit.bindings.<channelName>.producer.prefix=
# \u8BBE\u7F6E\u9700\u8981\u88AB\u4F20\u9012\u7684\u8BF7\u6C42\u5934\u4FE1\u606F
spring.cloud.stream.rabbit.bindings.<channelName>.producer.requestHeaderPatterns=[STANDARD_REQUEST_HEADERS,'*']
# \u8BBE\u7F6E\u9700\u8981\u88AB\u4F20\u9012\u7684\u76F8\u5E94\u5934\u4FE1\u606F
spring.cloud.stream.rabbit.bindings.<channelName>.producer.replyHeaderPatterns=[STANDARD_REQUEST_HEADERS,'*']


# kafka\u901A\u7528\u914D\u7F6E
# Kafka\u7ED1\u5B9A\u5668\u94FE\u63A5\u7684\u6D88\u606F\u4E2D\u95F4\u4EF6\u5217\u8868.\u9700\u8981\u914D\u7F6E\u591A\u4E2A\u65F6\u7528\u9017\u53F7\u5206\u9694,\u6BCF\u4E2A\u5730\u5740\u5355\u72EC\u7684host\u6216\u8FD9host:port
spring.cloud.stream.kafka.binder.brokers=localhost
# \u7528\u6765\u8BBE\u7F6E\u9ED8\u8BA4\u6D88\u606F\u4E2D\u95F4\u4EF6\u7AEF\u53E3\u53F7.\u5F53brokers\u4E2D\u7684\u914D\u7F6E\u5730\u5740\u6CA1\u6709\u5305\u542B\u7AEF\u53E3\u4FE1\u606F\u65F6,\u4F7F\u7528\u8BE5\u53C2\u6570\u914D\u7F6E\u7684\u9ED8\u8BA4\u7AEF\u53E3
spring.cloud.stream.kafka.binder.defaultBrokerPort=9092
# Kafka\u7ED1\u5B9A\u5668\u4F7F\u7528Zookeeper\u8282\u70B9\u5217\u8868.\u9700\u8981\u914D\u7F6E\u591A\u4E2A\u65F6\u7528\u9017\u53F7\u5206\u9694,\u6BCF\u4E2A\u5730\u5740\u53EF\u4EE5\u4F7F\u5355\u72EC\u7684host\u6216\u8005host:port
spring.cloud.stream.kafka.binder.zkNodes=localhost
# \u7528\u6765\u8BBE\u7F6E\u9ED8\u8BA4\u7684Zookeeper\u7AEF\u53E3\u53F7.\u5F53zkNodes\u4E2D\u914D\u7F6E\u7684\u5730\u5740\u6CA1\u6709\u5305\u542B\u7AEF\u53E3\u4FE1\u606F\u65F6,\u4F7F\u7528\u8BE5\u53C2\u6570\u914D\u7F6E\u9ED8\u8BA4\u7AEF\u53E3
spring.cloud.stream.kafka.binder.defaultZkPort=2181
# \u7528\u6765\u8BBE\u7F6E\u4F1A\u88AB\u4F20\u8F93\u7684\u81EA\u5B9A\u4E49\u5934\u4FE1\u606F
spring.cloud.stream.kafka.binder.headers=
# \u7528\u6765\u8BBE\u7F6Eoffset\u7684\u66F4\u65B0\u9891\u7387,\u4EE5\u6BEB\u79D2\u4E3A\u5355\u4F4D,\u5982\u679C\u8BBE\u7F6E\u4E3A0\u5219\u5FFD\u7565
spring.cloud.stream.kafka.binder.offsetUpdateTimeWindow=10000
# \u7528\u6765\u8BBE\u7F6Eoffset\u4EE5\u6B21\u6570\u6807\u8BC6\u7684\u66F4\u65B0\u9891\u7387,\u5982\u679C\u4E3A0\u5219\u5FFD\u7565,\u4E0EoffsetUpdateTimeWindow\u4E92\u65A5
spring.cloud.stream.kafka.binder.offsetUpdateCount=0

# \u7528\u6765\u8BBE\u7F6E\u786E\u8BA4\u6D88\u606F\u7684\u6570\u91CF
spring.cloud.stream.kafka.binder.requiredAcks=1
# \u8BE5\u53C2\u6570\u4EC5\u5728\u8BBE\u7F6E\u4E86autoCreateTopics\u548CautoAddPartitions\u65F6\u751F\u6548,\u7528\u6765\u8BBE\u7F6E\u8BE5\u7ED1\u5B9A\u5668\u6240\u4F7F\u7528\u4E3B\u9898\u7684\u5168\u5C40\u5206\u533A\u6700\u5C0F\u6570\u91CF
# \u5982\u679C\u4E0A\u7F20\u7740\u7684partitionCount\u53C2\u6570\u6216instance-count * concurrency\u8BBE\u7F6E\u5927\u4E8E\u8BE5\u53C2\u6570\u914D\u7F6E\u65F6,\u8BE5\u53C2\u6570\u503C\u88AB\u8986\u76D6
spring.cloud.stream.kafka.binder.minPartitionCount=1
# \u5F53autoCreateTopics\u53C2\u6570\u4E3Atrue\u65F6\u5019,\u7528\u6765\u914D\u7F6E\u81EA\u52A8\u521B\u5EFA\u4E3B\u9898\u7684\u526F\u672C\u6570\u91CF
spring.cloud.stream.kafka.binder.replicationFactor=1
# \u8BE5\u53C2\u6570\u9ED8\u8BA4\u4E3Atrue,\u7ED1\u5B9A\u5668\u4F1A\u81EA\u52A8\u521B\u5EFA\u65B0\u4E3B\u9898
# \u5982\u679C\u8BBE\u7F6E\u4E3Afalse,\u90A3\u4E48\u7ED1\u5B9A\u5668\u5C06\u4F7F\u7528\u5DF2\u7ECF\u914D\u7F6E\u7684\u4E3B\u9898,\u4F46\u662F\u8FD9\u79CD\u60C5\u51B5\u4E0B,\u5982\u679C\u9700\u8981\u4F7F\u7528\u7684\u4E3B\u9898\u4E0D\u5B58\u5728,\u5F53\u5B9A\u671F\u4F1A\u542F\u52A8\u5931\u8D25
spring.cloud.stream.kafka.binder.autoCreateTopics=true
# \u66F4\u6539\u53C2\u6570\u9ED8\u8BA4\u4E3Afalse,\u7ED1\u5B9A\u5668\u4F1A\u6839\u636E\u5DF2\u7ECF\u914D\u7F6E\u7684\u4E3B\u9898\u5206\u533A\u6765\u5B9E\u73B0
# \u5982\u679C\u76EE\u6807\u4E3B\u9898\u7684\u5206\u533A\u6570\u5C0F\u5B87\u9884\u671F\u503C,\u90A3\u4E48\u7ED1\u5B9A\u5668\u4F1A\u542F\u52A8\u5931\u8D25
# \u5982\u679C\u8BE5\u53C2\u6570\u8BBE\u7F6E\u4E3Atrue,\u7ED1\u5B9A\u5668\u5C06\u5728\u9700\u8981\u7684\u65F6\u5019\u81EA\u52A8\u521B\u5EFA\u65B0\u7684\u5206\u533A
spring.cloud.stream.kafka.binder.autoAddPartitions=false
# \u8BE5\u53C2\u6570\u7528\u6765\u8BBE\u7F6EKafka\u7684Socket\u7F13\u5B58\u5927\u5C0F
spring.cloud.stream.kafka.binder.socketBufferSize=2097152

# kafka\u6D88\u8D39\u8005\u914D\u7F6E
# \u7528\u6765\u8BBE\u7F6E\u5426\u51FA\u5728\u5904\u7406\u6D88\u606F\u65F6\u81EA\u52A8\u63D0\u4EA4offset
# \u5982\u679C\u8BBE\u7F6E\u4E3Afalse,\u5728\u6D88\u606F\u5934\u4E2D\u52A0\u5165ACK\u5934\u4FE1\u606F\u5B9E\u73B0\u5EF6\u8FDF\u786E\u8BA4
spring.cloud.stream.kafka.bindings.<channelName>.consumer.autoCommitOffset=true
# \u662F\u5426\u4F7F\u7528\u63D0\u4F9B\u7684startOffset\u503C\u6765\u91CD\u7F6E\u6D88\u8D39\u8005\u7684offset\u503C
spring.cloud.stream.kafka.bindings.<channelName>.consumer.resetOffsets=false
# \u8BBE\u7F6E\u65B0\u5EFA\u7EC4\u7684\u8D77\u59CBoffset,\u8BE5\u503C\u4E5F\u4F1A\u5728resetOffsets\u5F00\u59CB\u65F6\u88AB\u4F7F\u7528
spring.cloud.stream.kafka.bindings.<channelName>.consumer.startOffset=
# \u6D88\u8D39\u8005\u9884\u671F\u7684\u6700\u5C0F\u5206\u533A\u6570\uFF0C\u5982\u679C\u5B83\u81EA\u52A8\u521B\u5EFA\u6D88\u8017\u7684\u4E3B\u9898
spring.cloud.stream.kafka.bindings.<channelName>.consumer.minPartitionCount=1
# autoCommitOffset\u8BBE\u7F6E\u4E3Atrue\u65F6\u624D\u6709\u6548
# \u8BBE\u7F6E\u4E3Afalse\u7684\u65F6\u5019,\u5F15\u8D77\u7684\u9519\u8BEF\u4E0D\u4F1A\u81EA\u52A8\u63D0\u4EA4offset,\u4EC5\u63D0\u4EA4\u6210\u529F\u7684offset
# \u8BBE\u7F6E\u4E3Atrue\u7684\u65F6\u5019,\u65E0\u8BBA\u662F\u5426\u6210\u529F,\u90FD\u4F1A\u81EA\u52A8\u63D0\u4EA4
# \u5B9E\u9645\u4E0A\u5177\u6709enableDlq\u76F8\u540C\u7684\u914D\u7F6E\u503C
spring.cloud.stream.kafka.bindings.<channelName>.consumer.autoCommmitOnError=
# \u5C1D\u8BD5\u6062\u590D\u8FDE\u63A5\u7684\u65F6\u95F4\u5BB6\u5462,\u4EE5\u6BEB\u79D2\u4E3A\u5355\u4F4D
spring.cloud.stream.kafka.bindings.<channelName>.consumer.recoveryInterval=
# \u8BBE\u7F6E\u4E3Atrue\u65F6,\u59DC\u7EF4\u6D88\u8D39\u8005\u542F\u7528DLQ\u884C\u4E3A,\u5F15\u8D77\u9519\u8BEF\u7684\u6D88\u606F\u53D1\u9001\u5230error.<destination>.<group>\u7684\u4E3B\u9898\u4E2D
spring.cloud.stream.kafka.bindings.<channelName>.consumer.enableDlq=

# kafka\u751F\u4EA7\u8005\u914D\u7F6E
# kafka\u6279\u91CF\u53D1\u9001\u524D\u7684\u7F13\u5B58\u6570\u636E\u4E0A\u7EBF,\u4EE5\u5B57\u8282\u4E3A\u5355\u4F4D
spring.cloud.stream.kafka.bindings.<channelName>.producer.bufferSize=16384
# \u8BE5\u53C2\u6570\u7528\u6765\u8BBE\u7F6Ekafka\u6D88\u606F\u4EA7\u751F\u7740\u7684\u53D1\u9001\u6A21\u5F0F\u9ED8\u8BA4\u4E3Afalse,\u91C7\u7528async,\u5141\u8BB8\u6279\u91CF\u53D1\u9001
# \u8BBE\u7F6E\u4E3Atrue,\u91C7\u7528sync\u914D\u7F6E,\u4E0D\u4F1A\u6279\u91CF\u53D1\u9001,\u4E00\u6761\u4E00\u6761\u53D1\u9001
spring.cloud.stream.kafka.bindings.<channelName>.producer.sync=false
# \u6D88\u606F\u751F\u4EA7\u8005\u6279\u91CF\u53D1\u9001\u65F6,\u79EF\u7D2F\u66F4\u591A\u53D1\u9001\u6570\u636E\u8BBE\u7F6E\u7684\u7B49\u5F85\u65F6\u95F4
# \u59A5\u5F53\u8BBE\u7F6E\u4E00\u4E2A\u975E0\u503C,\u4EE5\u5EF6\u8FDF\u4F5C\u4E3A\u4EE3\u4EF7\u589E\u52A0\u7CFB\u7EDF\u7684\u541E\u5410\u91CF
spring.cloud.stream.kafka.bindings.<channelName>.producer.batchTimeout=0