spring.jackson.serialization.indent-output=true

#注册中心
server.port=1111
#关闭自我保护(eureka服务端)
eureka.server.enable-self-preservation=false
#eureka.instance.hostname=localhost
#eureka.client.register-with-eureka=false
#eureka.client.fetch-registry=false
#eureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/

#服务提供者
#eureka.client.register-with-eureka=true
#eureka.client.fetch-registry=true
spring.application.name=hello
eureka.client.service-url.defaultZone=http://localhost:1111/eureka/
#eureka客户端想服务发送心跳的时间间隔,续约时间
#eureka.instance.lease-renewal-interval-in-seconds=30
#eureka服务端在收到最后一次心跳之后扽带的时间上线,超时剔除并禁止请求发送至该实例,超时时间
#eureka.instance.lease-expiration-duration-in-seconds=90

#服务消费者
#eureka.client.register-with-eureka=true
#eureka.client.fetch-registry=true
#spring.application.name=hello
#eureka.client.service-url.defaultZone=http://localhost:1111/eureka/
#eureka.client.registry-fetch-interval-seconds=30



#启用Eureka客户端
eureka.client.enabled=true 
#从eurdka服务端获取注册信息的间隔时间
eureka.client.registry-fetch-interval-seconds=30
#更新实例信息的变化到Eureka服务端的间隔时间
eureka.client.instance-info-replication-interval-seconds=30
#初始化实例信息到eureka服务端间隔时间
eureka.client.initial-instance-info-replication-interval-seconds=40
#轮询erueka服务端地址更改的间隔时间;与spring cloud config配合,动态刷新erueka serviceUrl地址需要关注该参数
eureka.client.eureka-service-url-poll-interval-seconds=40
#读取eureka server信息的超时时间
eureka.client.eureka-server-read-timeout-seconds=8
#连接eureka server的超时时间
eureka.client.eureka-server-connect-timeout-seconds=5
#从eureka客户端到所有eureka服务端的连接数
eureka.client.eureka-server-total-connections=200
#从eureka客户端到每个eureka服务端主句的连接总数
eureka.client.eureka-server-total-connections-per-host=50
#eureka服务端连接的空闲关闭时间
eureka.client.eureka-connection-idle-timeout-seconds=30
#心跳连接池初始化线程数
eureka.client.heartbeat-executor-thread-pool-size=2
#心跳超时重试延迟时间的最大乘数值
eureka.client.heartbeat-executor-exponential-back-off-bound=10
#厨刷新线程池的初始化线程数
eureka.client.cache-refresh-executor-thread-pool-size=2
#缓存刷新重试延迟时间的最大乘数值
eureka.client.cache-refresh-executor-exponential-back-off-bound=10
#使用dns获取eureka服务端的serviceUrl
eureka.client.use-dns-for-fetching-service-urls=false
#是否要将自身的实例信息注册到eureka服务端
eureka.client.register-with-eureka=true
#是否偏好使用处于相同Zone的Eureka服务端
eureka.client.prefer-same-zone-eureka=true
#获取实例的时候是否过滤,仅保留up状态的实例
eureka.client.filter-only-up-instances=true
#是否从eureka服务端获取注册信息
eureka.client.fetch-registry=true

#端点配置,相对路径
management.context-path=/hello
eureka.instance.status-page-url-path=${management.context-path}/info
eureka.instance.health-check-url-path=${management.context-path}/health

endpoints.info.path=/appInfo
endpoints.health.path=/checkHealth
#eureka.instance.status-page-url-path=/${endpoints.info.path}
#eureka.instance.health-check-url-path=/${endpoints.health.path}

#端点配置,绝对路径
eureka.instance.home-page-url=https://${eureka.instance.hostname}/info
eureka.instance.status-page-url=https://${eureka.instance.hostname}/health
eureka.instance.health-check-url=https://${eureka.instance.hostname}

#健康检查
eureka.client.healthcheck.enabled=true
management.security.enabled=false


#是否悠闲使用ip地址作为主机名
eureka.instance.prefer-ip-address=false
#eureka客户端想服务发送心跳的时间间隔
eureka.instance.lease-renewal-interval-in-seconds=30
#eureka服务端在收到最后一次心跳之后扽带的时间上线,超时剔除并禁止请求发送至该实例
eureka.instance.lease-expiration-duration-in-seconds=90
#非安全的通信端口号
eureka.instance.non-secure-port=80
#安全的通信端口号
eureka.instance.secure-port=443
#是否启用非安全端口号
eureka.instance.non-secure-port-enabled=true
#是否启用安全的端口号
eureka.instance.secure-port-enabled=
#服务名 默认spring.application.name 没有则unknown
eureka.instance.appname=
#主机名,不配置的时候根据操作系统的主机名来获取
eureka.instance.hostname=


